# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\jacky\OneDrive\Documents\SlateInPost\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import SpeechReg
import convert
import similarity
import PyQt5
import os
from PyQt5 import QtCore, QtGui, QtWidgets

PyQt5.QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)



class Ui_SlateInPost(object):
    def setupUi(self, SlateInPost):
        self.data = {}
        self.files = []
        self.info = []
        self.outputFile = None
        self.savePath = "./"
        font = QtGui.QFont()
        font.setPointSize(8)
        SlateInPost.setObjectName("SlateInPost")
        SlateInPost.resize(549, 454)
        self.centralwidget = QtWidgets.QWidget(SlateInPost)
        self.centralwidget.setObjectName("centralwidget")
        self.importBtn = QtWidgets.QPushButton(self.centralwidget)
        self.importBtn.setGeometry(QtCore.QRect(190, 60, 151, 51))
        self.importBtn.setObjectName("importBtn")
        self.importBtn.setFont(font)
        self.outputBtn = QtWidgets.QPushButton(self.centralwidget)
        self.outputBtn.setGeometry(QtCore.QRect(210, 180, 111, 31))
        self.outputBtn.setObjectName("outputBtn")
        self.outputBtn.setFont(font)
        self.stepOne = QtWidgets.QLabel(self.centralwidget)
        self.stepOne.setGeometry(QtCore.QRect(60, 30, 201, 16))
        self.stepOne.setObjectName("stepOne")
        self.stepOne.setFont(font)
        self.stepTwo = QtWidgets.QLabel(self.centralwidget)
        self.stepTwo.setGeometry(QtCore.QRect(60, 130, 291, 16))
        self.stepTwo.setObjectName("stepTwo")
        self.stepTwo.setFont(font)
        self.stepTwo_1 = QtWidgets.QLabel(self.centralwidget)
        self.stepTwo_1.setGeometry(QtCore.QRect(60, 150, 431, 16))
        self.stepTwo_1.setObjectName("stepTwo_1")
        self.stepTwo_1.setFont(font)
        self.stepThree = QtWidgets.QLabel(self.centralwidget)
        self.stepThree.setGeometry(QtCore.QRect(60, 220, 111, 16))
        self.stepThree.setObjectName("stepThree")
        self.stepThree.setFont(font)
        self.similaritySlider = QtWidgets.QSlider(self.centralwidget)
        self.similaritySlider.setGeometry(QtCore.QRect(60, 250, 160, 16))
        self.similaritySlider.setOrientation(QtCore.Qt.Horizontal)
        self.similaritySlider.setMinimum(30)
        self.similaritySlider.setMaximum(100)
        self.similaritySlider.setObjectName("similaritySlider")
        self.similarityLabel = QtWidgets.QLabel(self.centralwidget)
        self.similarityLabel.setGeometry(QtCore.QRect(90, 270, 91, 20))
        self.similarityLabel.setObjectName("similarityLabel")
        self.similarityLabel.setFont(font)
        self.deleteWAV = QtWidgets.QCheckBox(self.centralwidget)
        self.deleteWAV.setGeometry(QtCore.QRect(60, 320, 300, 18))
        self.deleteWAV.setObjectName("deleteWAV")
        self.deleteWAV.setFont(font)
        self.deleteWAV.toggled.connect(self.disableCheck)
        self.convertForMe = QtWidgets.QCheckBox(self.centralwidget)
        self.convertForMe.setGeometry(QtCore.QRect(60, 300, 300, 18))
        self.convertForMe.setObjectName("convertForMe")
        self.convertForMe.setText("Convert my media files for me (ffmpeg required).")
        self.convertForMe.setFont(font)
        self.speechAPIcombo = QtWidgets.QComboBox(self.centralwidget)
        self.speechAPIcombo.setGeometry(QtCore.QRect(320, 250, 151, 22))
        self.speechAPIcombo.setObjectName("speechAPIcombo")
        self.speechAPIcombo.setFont(font)
        self.speechAPIcombo.addItem("Sphinx")
        self.speechAPIcombo.addItem("Google Speech Recognition")
        self.speechAPIcombo.addItem("Wit.ai")
        self.speechAPIcombo.addItem("Bing")
        self.speechAPIcombo.addItem("Houndify")
        self.speechAPIcombo.addItem("IBM")
        self.speechAPIlbl = QtWidgets.QLabel(self.centralwidget)
        self.speechAPIlbl.setGeometry(QtCore.QRect(320, 270, 161, 20))
        self.speechAPIlbl.setObjectName("speechAPIlbl")
        self.speechAPIlbl.setFont(font)
        self.actionBtn = QtWidgets.QPushButton(self.centralwidget)
        self.actionBtn.setGeometry(QtCore.QRect(200, 385, 141, 41))
        self.actionBtn.setObjectName("actionBtn")
        fontB = QtGui.QFont()
        fontB.setBold(True)
        fontB.setItalic(False)
        fontB.setWeight(75)
        fontB.setPointSize(8)
        self.actionBtn.setFont(fontB)
        SlateInPost.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(SlateInPost)
        self.statusbar.setObjectName("statusbar")
        SlateInPost.setStatusBar(self.statusbar)

        self.retranslateUi(SlateInPost)
        QtCore.QMetaObject.connectSlotsByName(SlateInPost)

        self.importBtn.clicked.connect(self.importMedia)
        self.outputBtn.clicked.connect(self.output)
        self.similaritySlider.valueChanged.connect(self.similarityValue)
        self.actionBtn.clicked.connect(self.action)
        self.convertForMe.stateChanged.connect(self.disableCheck)
        self.speechAPIcombo.currentIndexChanged.connect(self.select_api)


    def retranslateUi(self, SlateInPost):
        _translate = QtCore.QCoreApplication.translate
        SlateInPost.setWindowTitle(_translate("SlateInPost", "MainWindow"))
        self.importBtn.setText(_translate("SlateInPost", "Import Media Files"))
        self.outputBtn.setText(_translate("SlateInPost", "Save output to..."))
        self.stepOne.setText(_translate("SlateInPost", "Step 1: select media files for syncing"))
        self.stepTwo.setText(_translate("SlateInPost", "Step 2: select output location. The output will be a .txt file."))
        self.stepTwo_1.setText(_translate("SlateInPost", "SlateInPost can also convert all your media files to .wav and save them to this folder."))
        self.stepThree.setText(_translate("SlateInPost", "Step 3: sync settings"))
        self.similarityLabel.setText(_translate("SlateInPost", "Similarity: " + str(self.similaritySlider.value()) + "%"))
        self.deleteWAV.setText(_translate("SlateInPost", "Delete created .wav files"))
        self.speechAPIlbl.setText(_translate("SlateInPost", "Speech recognition engine/API "))
        self.actionBtn.setText(_translate("SlateInPost", "Action!"))

    def importMedia(self):
        files, _ = QtWidgets.QFileDialog.getOpenFileNames(None, "Select Media Files", "", "Media Files (*.mp4 *.wmv "
                                                                                          "*.mp3 *.mov *.m4a *.wav)")
        if files:
            self.files = list(files)
            print(self.files)

    def output(self):
        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(self.centralwidget, "Save output as...", "", "Text File "
                                                                                                         "(*.txt)")
        if fileName:
            path, _ = os.path.split(fileName)
            self.savePath = path
            print(self.savePath)
            self.outputFile = open(fileName, "w+")

    def select_api(self):
        if self.speechAPIcombo.currentText() == "Wit.ai":
            text, okPressed = QtWidgets.QInputDialog.getText(self.centralwidget, "Key Required",
                                                             "Wit.ai key:",
                                                             QtWidgets.QLineEdit.Normal, "")
            if okPressed and text != '':
                self.info = [text]
            else:
                self.speechAPIcombo.setCurrentIndex(0)
        elif self.speechAPIcombo.currentText() == "Bing":
            text, okPressed = QtWidgets.QInputDialog.getText(self.centralwidget, "Key Required",
                                                             "Bing API key:",
                                                             QtWidgets.QLineEdit.Normal, "")
            if okPressed and text != '':
                self.info = [text]
            else:
                self.speechAPIcombo.setCurrentIndex(0)
        elif self.speechAPIcombo.currentText() == "Houndify":
            text, okPressed = QtWidgets.QInputDialog.getText(self.centralwidget, "Client info Required",
                                                             "Please enter you Houdify client info in the format "
                                                             "id,key (your client id then your client key, separated "
                                                             "by a comma):",
                                                             QtWidgets.QLineEdit.Normal, "")
            if okPressed and text != '' and "," in text:
                self.info = text.split(",")
            else:
                self.speechAPIcombo.setCurrentIndex(0)
        elif self.speechAPIcombo.currentText() == "IBM":
            text, okPressed = QtWidgets.QInputDialog.getText(self.centralwidget, "IBM account info required",
                                                             "Please enter you IBM account info in the format "
                                                             "username,password (your username then your password, "
                                                             "separated by a comma):",
                                                             QtWidgets.QLineEdit.Normal, "")
            if okPressed and text != '' and "," in text:
                self.info = text.split(",")
            else:
                self.speechAPIcombo.setCurrentIndex(0)


    def disableCheck(self):
        if not self.convertForMe.isChecked():
            self.deleteWAV.setChecked(False)

    def similarityValue(self):
        self.similarityLabel.setText("Similarity: " + str(self.similaritySlider.value()) + "%")

    def show_popup(self, name, text):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle(name)
        msg.setText(text)
        x = msg.exec_()

    def _run_reg(self):
        errors = []
        i = 0
        progress_dialog = QtWidgets.QProgressDialog(self.centralwidget)
        progress_dialog.setWindowModality(QtCore.Qt.WindowModal)
        progress_dialog.setWindowTitle("Transcribing your files")
        progress_dialog.setCancelButtonText("Cancel")
        progress_dialog.setMaximum(100)
        progress_dialog.setMinimum(0)
        progress_dialog.forceShow()
        for file in self.files:
            i += 1
            progress_dialog.setValue(int(i/len(self.files)*100))
            _, name = os.path.split(file)
            if name[name.find("."):] not in [".wav", ".WAV"]:
                continue
            name = name[:name.find(".")]
            progress_dialog.setLabelText("Transcribing {}...".format(name))
            if progress_dialog.wasCanceled():
                progress_dialog.close()
                break
            QtCore.QCoreApplication.processEvents()
            text, success = SpeechReg.transcribe_file(file, self.speechAPIcombo.currentText(), self.info)
            if progress_dialog.wasCanceled():
                progress_dialog.close()
                break
            QtCore.QCoreApplication.processEvents()
            if not success:
                errors.append(name)
            else:
                self.data[text] = name
        progress_dialog.close()
        return errors

    def action(self):
        if not self.outputFile:
            self.show_popup("Error", "Have you chosen your output path yet?")
            return
        self.data = {}
        if self.convertForMe.isChecked():
            progress_dialog = QtWidgets.QProgressDialog(self.centralwidget)
            progress_dialog.setWindowModality(QtCore.Qt.WindowModal)
            progress_dialog.setWindowTitle("Converting your files")
            progress_dialog.setCancelButtonText("Cancel")
            progress_dialog.setMaximum(100)
            progress_dialog.setMinimum(0)
            progress_dialog.forceShow()
            for i in range(len(self.files)):
                progress_dialog.setValue(int((i+1)/len(self.files)*100))
                progress_dialog.setLabelText("Converting {}...".format(self.files[i]))
                new = convert.convert_one_file(self.files[i], self.savePath)
                self.files[i] = new
            progress_dialog.close()
        errors = self._run_reg()
        if self.deleteWAV.isChecked():
            for file in self.files:
                os.remove(file)
        if len(errors) == len(self.files):
            self.show_popup("Complete", "None of your files were successfully transcribed. Did you enter your "
                            "api key/credentials correctly?")
            return
        result = similarity.process_list(self.data, self.similaritySlider.value())
        self.outputFile.write("="*20 + "\nSimilarity Report\n" + "="*20+"\n")
        for nameFile in result.keys():
            self.outputFile.write(nameFile + "\n")
            for other in result[nameFile]:
                self.outputFile.write("\t{}\n".format(other))
        self.outputFile.write("="*20 + "\nTranscripts\n" + "="*20+"\n")
        for script in self.data.keys():
            self.outputFile.write("-"*10 + self.data[script] + "-"*10+"\n")
            self.outputFile.write(script+"\n")
        if errors != []:
            self.outputFile.write("=" * 20 + "\nFiles Not Transcribed\n" + "=" * 20+"\n")
            for name in errors:
                self.outputFile.write(name+"\n")
        self.outputFile.close()
        if len(errors) == 0:
            self.show_popup("Complete", "All your files are successfully transcribed!")
        else:
            files = "\n"
            for file in errors:
                files += file
                files += "\n"
            files = files[:-1]
            self.show_popup("Complete", str(len(self.files) - len(errors)) + " out of " + str(len(self.files))
                            + " files were successfully transcribed. We had trouble transcribing the following files"
                              ":" + files)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_SlateInPost()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

